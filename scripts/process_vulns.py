import argparse
import json
import requests
import sys
import os

# ==============================
# Jira Configuration
# ==============================
JIRA_URL = os.environ.get("JIRA_URL")
JIRA_EMAIL = os.environ.get("JIRA_EMAIL")
JIRA_API_TOKEN = os.environ.get("JIRA_API_TOKEN")
PROJECT_KEY = os.environ.get("PROJECT_KEY")
DONE_TRANSITION_ID = os.environ.get("DONE_TRANSITION_ID")

if not JIRA_API_TOKEN:
    raise ValueError("Error: JIRA_API_TOKEN is not set. Please check your GitHub Actions secrets.")


# ===========================
# Helper Functions
# ===========================

def read_json_file(file_path):
    """Read and parse a JSON file."""
    if not os.path.exists(file_path):
        print(f"[ERROR] File not found: {file_path}")
        sys.exit(1)
    with open(file_path, "r") as f:
        return json.load(f)

def format_adf_description(text):
    """Format description to Atlassian Document Format (ADF)."""
    return {
        "type": "doc",
        "version": 1,
        "content": [
            {
                "type": "paragraph",
                "content": [
                    {
                        "type": "text",
                        "text": text if text else "No description provided."
                    }
                ]
            }
        ]
    }

def create_jira_issue(vuln_id, description, severity):
    """Create a Jira issue for a vulnerability."""
    url = f"{JIRA_URL}/rest/api/3/issue"
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

    payload = {
        "fields": {
            "project": {
                "key": PROJECT_KEY
            },
            "summary": f"[{severity.upper()}] {vuln_id} detected",
            "description": format_adf_description(description),
            "issuetype": {
                "name": "Task"  # Changed to "Task" since "Bug" doesn't exist in your Jira project
            }
        }
    }

    response = requests.post(url, headers=headers, json=payload, auth=(JIRA_EMAIL, JIRA_API_TOKEN))

    if response.status_code == 201:
        print(f"[INFO] Jira issue created successfully for {vuln_id}")
    else:
        print(f"[ERROR] Failed to create Jira issue. Status Code: {response.status_code}, Response: {response.text}")

# ===========================
# Core Vulnerability Processing
# ===========================

def process_vulnerabilities(sbom_file, grype_file, min_severity):
    """Process SBOM and Grype scan to find exploitable vulnerabilities."""
    print("[INFO] Reading SBOM and Grype scan files...")
    sbom = read_json_file(sbom_file)
    grype = read_json_file(grype_file)

    exploitable_vulns = []
    severity_levels = ["negligible", "low", "medium", "high", "critical"]

    for match in grype.get("matches", []):
        vuln = match.get("vulnerability", {})
        severity = vuln.get("severity", "").lower()

        # Skip if below min_severity
        if severity not in severity_levels:
            continue
        if severity_levels.index(severity) < severity_levels.index(min_severity.lower()):
            continue

        vuln_id = vuln.get("id")
        description = vuln.get("description", "No description provided.")

        exploitable_vulns.append({
            "id": vuln_id,
            "severity": severity,
            "description": description
        })

        print(f"[INFO] Creating Jira issue for {vuln_id}...")
        create_jira_issue(vuln_id, description, severity)

    print(f"[INFO] Total exploitable vulnerabilities processed: {len(exploitable_vulns)}")
    return exploitable_vulns

# ===========================
# Command-Line Interface
# ===========================

def main():
    parser = argparse.ArgumentParser(description="Automated CVE Triage and Jira Integration")
    parser.add_argument("--sbom", required=True, help="Path to SBOM JSON file (generated by Syft)")
    parser.add_argument("--grype", required=True, help="Path to Grype scan JSON file")
    parser.add_argument(
        "--min-severity",
        required=True,
        choices=["negligible", "low", "medium", "high", "critical"],
        help="Minimum severity level to consider (e.g., medium)"
    )
    args = parser.parse_args()

    process_vulnerabilities(args.sbom, args.grype, args.min_severity)

if __name__ == "__main__":
    main()
